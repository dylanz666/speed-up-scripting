import { Case } from "runtime/api";
import { config, DATA_SETS } from "runtime/config";
import { IDataSet, User } from "sut/domain";
import { Webinar } from "sut/webinar";

Case(
    {
        name: "{{caseName}}",
        ids: ["{{caseId}}"],
        priority: "{{priority}}",
        keywords: [DATA_SETS.WEBINAR_COMMON{{@keywords}}],
        maintainers: ["{{automatedBy}}"],
        docs: ["https://xxx.yyyy.com/test-cases/{{caseId}}"],
    },

    async c => {
        const webinarHostKeywords = c.getWebinarHostKeywords();
        const webinarHostKeywordsForCohost = c.getWebinarHostKeywords();
        const webinarHostKeywordsForPanelist = c.getWebinarHostKeywords();
        const webinarAudienceKeywords = c.getWebinarAudienceKeywords();
        let dataSet: IDataSet;
        let admin: User;
        let host: User;
        let cohost: User;
        let panelist: User;
        let audience: User;
        let webinar: Webinar;

        await c.step("Given 1 host, 1 cohost, 1 panelist, 1 audience", async s => {
            dataSet = await c.accountPoolManager.take(DATA_SETS.WEBINAR_COMMON);
            admin = dataSet.getAdmin();
            host = dataSet.nthUser(0);
            cohost = dataSet.nthUser(1);
            panelist = dataSet.nthUser(2);
            audience = dataSet.nthUser(3);
            s.meta({
                host: { number: host.company.number, ext: host.pin },
                cohost: { number: cohost.company.number, ext: cohost.pin },
                panelist: { number: panelist.company.number, ext: panelist.pin },
                audience: { number: audience.company.number, ext: audience.pin },
            });
            await c.context.sdk.setWebinarSettingDefaults({ user: host, admin: admin });
        });

        await c.step("When the host schedule and go live a webianr", async () => {
            webinar = Webinar.makeSimpleWebinar(host);
            await c.context.sdk.scheduleWebinar(webinar);
            await c.context.sdk.startOrJoinWebinar(webinar);
            await c.context.sdk.goLiveWebinar(webinar);
            c.collectWebinar(webinar);
        });

        await c.step("And the host invite 1 cohost and 1 panelist", async () => {
            const cohostJoinUri = await c.context.sdk.addInviteeForWebinar(webinar, cohost, "CoHost");
            webinar.cohostJoinUris = [cohostJoinUri];

            const panelistJoinUri = await c.context.sdk.addInviteeForWebinar(webinar, panelist, "Panelist");
            webinar.panelistJoinUris = [panelistJoinUri];
        });

        await c.step("And ", async () => {
            
        });

        await c.step("And ", async () => {
            
        });

        await c.step("Then ", async () => {
            
        });
    }
)